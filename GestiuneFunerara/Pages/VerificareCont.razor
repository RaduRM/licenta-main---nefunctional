@page "/verificarecont"
@using GestiuneFunerara.Models
@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@inject GestiuneFuneraraContext Db
@inject NavigationManager Nav
@inject EmailService EmailService

<link href="/css/login.css" rel="stylesheet" />

<div class="login-wrapper">
    <div class="login-box">
        <h2>Verificare cont</h2>

        @if (!string.IsNullOrEmpty(mesaj))
        {
            <div class="error-message">@mesaj</div>
        }

        <EditForm Model="model" OnValidSubmit="VerificaActivare">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputText @bind-Value="model.Email" class="form-control" placeholder="Email" />
            <InputText @bind-Value="model.Cod" class="form-control" placeholder="Cod activare" />

            <button type="submit" class="btn-login mt-2">Verifică și activează contul</button>
        </EditForm>

        <div class="text-center mt-4">
            <button class="btn btn-outline-dark w-100" @onclick="TrimiteAltCod">Trimite alt cod de activare</button>
        </div>
    </div>
</div>

@code {
    private VerificareModel model = new();
    private string mesaj = "";

    private async Task VerificaActivare()
    {
        var user = await Db.Utilizatoris.FirstOrDefaultAsync(u => u.Email == model.Email);

        if (user is null)
        {
            mesaj = "Email inexistent.";
            return;
        }

        if (user.EsteActiv == true)
        {
            mesaj = "Contul este deja activat.";
            return;
        }

        if (user.CodActivare == model.Cod)
        {
            user.EsteActiv = true;
            user.CodActivare = null;

            Db.Update(user);
            await Db.SaveChangesAsync();

            mesaj = "Cont activat cu succes. Te poți autentifica.";
            await Task.Delay(1500);
            Nav.NavigateTo("/login");
        }
        else
        {
            mesaj = "Cod greșit.";
        }
    }

    private async Task TrimiteAltCod()
    {
        var user = await Db.Utilizatoris.FirstOrDefaultAsync(u => u.Email == model.Email);
        if (user == null)
        {
            mesaj = "Email inexistent.";
            return;
        }

        if (user.EsteActiv == true)
        {
            mesaj = "Contul este deja activat.";
            return;
        }

        string codNou = new Random().Next(100000, 999999).ToString();
        user.CodActivare = codNou;

        Db.Update(user);
        await Db.SaveChangesAsync();

        await EmailService.TrimiteEmailActivareContAsync(user.Email, codNou);
        mesaj = "Un nou cod de activare a fost trimis.";
    }

    public class VerificareModel
    {
        [Required]
        public string Email { get; set; } = "";

        [Required]
        public string Cod { get; set; } = "";
    }
}
