@page "/resetparola"
@using System.ComponentModel.DataAnnotations
@using GestiuneFunerara.Models
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager Nav
@inject GestiuneFuneraraContext DbContext

<link href="/css/resetpassword.css" rel="stylesheet" />

<div class="reset-wrapper">
    <div class="reset-box">
        <h2>Resetare parolă</h2>

        @if (!string.IsNullOrEmpty(Mesaj))
        {
            <div class="error-message">@Mesaj</div>
        }

        @if (!codVerificat)
        {
            <EditForm Model="codModel" OnValidSubmit="VerificaCod">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <InputText @bind-Value="codModel.Cod" class="form-control" placeholder="Cod primit pe email" />

                <button class="btn-submit" type="submit">Verifică codul</button>
            </EditForm>
        }
        else
        {
            <EditForm Model="model" OnValidSubmit="ReseteazaParola">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <InputText type="password" @bind-Value="model.ParolaNoua" class="form-control" placeholder="Parolă nouă" />
                <InputText type="password" @bind-Value="model.ConfirmareParola" class="form-control" placeholder="Confirmă parola" />

                <button class="btn-submit" type="submit">Salvează parola</button>
            </EditForm>
        }
    </div>
</div>

@code {
    private ResetPasswordModel model = new();
    private CodModel codModel = new();
    private string? email;
    private string Mesaj = "";
    private bool codVerificat = false;

    protected override void OnInitialized()
    {
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("email", out var paramEmail))
        {
            email = paramEmail;
        }
    }

    private async Task VerificaCod()
    {
        var user = DbContext.Utilizatoris.FirstOrDefault(u => u.Email == email);
        if (user == null || user.CodResetare != codModel.Cod || user.CodExpiraLa < DateTime.Now)
        {
            Mesaj = "Cod invalid sau expirat.";
            return;
        }

        codVerificat = true;
        Mesaj = "";
    }

    private async Task ReseteazaParola()
    {
        var user = DbContext.Utilizatoris.FirstOrDefault(u => u.Email == email);
        if (user == null)
        {
            Mesaj = "Eroare internă.";
            return;
        }

        user.Parola_hashuita = model.ParolaNoua; // *de criptat parola, de-aia se numeste hashuita :)*
        user.CodResetare = null;
        user.CodExpiraLa = null;

        DbContext.Update(user);
        await DbContext.SaveChangesAsync();

        Mesaj = "Parola a fost schimbată cu succes.";
        await Task.Delay(1500);
        Nav.NavigateTo("/login");
    }

    public class ResetPasswordModel
    {
        [Required(ErrorMessage = "Introduceți o parolă nouă.")]
        [MinLength(6, ErrorMessage = "Parola trebuie să aibă cel puțin 6 caractere.")]
        public string ParolaNoua { get; set; } = "";

        [Required(ErrorMessage = "Confirmați parola.")]
        [Compare(nameof(ParolaNoua), ErrorMessage = "Parolele nu se potrivesc.")]
        public string ConfirmareParola { get; set; } = "";
    }

    public class CodModel
    {
        [Required(ErrorMessage = "Introduceți codul primit pe email.")]
        public string Cod { get; set; } = "";
    }
}
